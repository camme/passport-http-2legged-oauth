{
  "name": "passport-http-2legged-oauth",
  "version": "0.3.6",
  "description": "HTTP OAuth 2-legged (even called 0-legged) authentication strategy for Passport.",
  "keywords": [
    "passport",
    "http",
    "oauth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "2-legged",
    "api"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Camme/passport-http-2legged-oauth.git"
  },
  "bugs": {
    "url": "https://github.com/Camme/passport-http-2legged-oauth/issues"
  },
  "author": {
    "name": "Camilo Tapia",
    "email": "camilo.tapia@gmail.com",
    "url": "http://www.onezerozeroone.com/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport": "~0.1.11"
  },
  "readme": "# Oauth 2-legged strategy for passport\n\nThis oauth strategy is used for a 2-legged scenario (even called 0-legged).\nIts a consumer to server authentication where each request is signed as defined in oauth but an empty access_token is used. No user data is exposed, as it is the consumer that has access to the protected resource.\n\nIt works as https://github.com/jaredhanson/passport-http-oauth but skips the access_token verification step and accepts empty access_tokens.\n\nThe cose base is 98% https://github.com/jaredhanson/passport-http-oauth but adapted for the 2-legged scenario. So thanks jaredhanson for all work!.\n\n",
  "_id": "passport-http-2legged-oauth@0.2.1",
  "dist": {
    "shasum": "ed2ddd65e7e0166138928add9669a257a6a2890a"
  },
  "_from": "passport-http-2legged-oauth"
}
